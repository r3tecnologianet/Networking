// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Networking
import Foundation
import Swift
import _Concurrency
public enum BodyEncoding {
  case jsonSerializationData
  case stringEncodingAscii
  public static func == (a: Networking.BodyEncoding, b: Networking.BodyEncoding) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum HttpMethodtype : Swift.String {
  case get
  case head
  case post
  case put
  case patch
  case delete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct NetworkConfig : Networking.NetworkConfigurable {
  public let baseURL: Foundation.URL
  public let headers: [Swift.String : Swift.String]
  public let queryParameters: [Swift.String : Swift.String]
  public init(baseURL: Foundation.URL, headers: [Swift.String : Swift.String] = [:], queryParameters: [Swift.String : Swift.String] = [:])
}
public protocol NetworkConfigurable {
  var baseURL: Foundation.URL { get }
  var headers: [Swift.String : Swift.String] { get }
  var queryParameters: [Swift.String : Swift.String] { get }
}
public class NetworkService {
  public typealias CompletionHandler<T> = (Swift.Result<T, Swift.Error>) -> Swift.Void where T : Swift.Decodable
  public init(session: Foundation.URLSession = URLSession(configuration: .default))
  public func request<T>(url: Foundation.URL, method: Networking.HttpMethodtype = .get, headers: [Swift.String : Swift.String]? = nil, body: Foundation.Data? = nil, completion: @escaping Networking.NetworkService.CompletionHandler<T>) where T : Swift.Decodable
  @objc deinit
}
extension Networking.BodyEncoding : Swift.Equatable {}
extension Networking.BodyEncoding : Swift.Hashable {}
extension Networking.HttpMethodtype : Swift.Equatable {}
extension Networking.HttpMethodtype : Swift.Hashable {}
extension Networking.HttpMethodtype : Swift.RawRepresentable {}
